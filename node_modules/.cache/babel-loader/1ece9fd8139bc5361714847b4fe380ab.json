{"ast":null,"code":"var _jsxFileName = \"/home/user/traveauKDA/Travail10/AmisRobot/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"./components/card\";\nimport InputField from \"./components/inputfield\";\nimport \"./App.css\";\nimport Modal from 'react-modal';\nimport Loading from \"./components/loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\n\nconst App = () => {\n  _s();\n\n  let [friends, setFriends] = useState([]);\n  let [load, setLoad] = useState(false);\n  let [modalIsOpen, setModalIsOpen] = useState(false);\n  let [singleFriend, setSingleFriend] = useState({});\n  let [friendsTampon, setFriendsTampon] = useState(friends);\n  useEffect(() => {\n    setLoad(true);\n    fetch(\"http://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(data => {\n      let dataMapped = data.map(({\n        id,\n        name,\n        email\n      }) => {\n        return {\n          id,\n          name,\n          email\n        };\n      });\n      setFriends(dataMapped);\n      setFriendsTampon(dataMapped);\n      setLoad(false);\n    });\n  }, []);\n\n  const handleChange = e => {\n    e.preventDefault();\n    const filteredFriends = friends.filter(friend => {\n      return friend.name.toLowerCase().includes(e.target.value.toLowerCase());\n    });\n    setFriendsTampon(friendsTampon = filteredFriends);\n  };\n\n  const openModal = () => {\n    setSingleFriend(friends.find(friend => {\n      return friend.id = 1;\n    }));\n    setModalIsOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: load ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"bloc-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"centered\",\n          children: \"MES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 32\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"centered\",\n          children: \"AMIS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 68\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"centered\",\n          children: \"ROBOTS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 104\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(InputField, {\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bloc-cards\",\n        children: friendsTampon.map((friend, index) => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            onClick: () => openModal(frien),\n            name: friend.name,\n            email: friend.email,\n            url: `https://robohash.org/${friend.id}`\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: modalIsOpen,\n        onRequestClose: () => setModalIsOpen(false),\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: singleFriend.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: singleFriend.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"Smad3XILOtz2vPFtTZIYrw6CENE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/user/traveauKDA/Travail10/AmisRobot/src/App.jsx"],"names":["React","useState","useEffect","Card","InputField","Modal","Loading","setAppElement","App","friends","setFriends","load","setLoad","modalIsOpen","setModalIsOpen","singleFriend","setSingleFriend","friendsTampon","setFriendsTampon","fetch","then","response","json","data","dataMapped","map","id","name","email","handleChange","e","preventDefault","filteredFriends","filter","friend","toLowerCase","includes","target","value","openModal","find","index","frien"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Card from \"./components/card\";\nimport InputField from \"./components/inputfield\";\nimport \"./App.css\"\nimport Modal from 'react-modal';\nimport Loading from \"./components/loading\";\n\nModal.setAppElement('#root')\nconst App = () => {\n\tlet [friends, setFriends] = useState([]);\n\tlet [load, setLoad]= useState(false);\n\tlet [modalIsOpen,setModalIsOpen] = useState(false);\n\tlet [singleFriend,setSingleFriend] = useState({});\n\n\n    let [friendsTampon, setFriendsTampon] = useState(friends);\n\tuseEffect(() => {\n\t\tsetLoad(true)\n\t\tfetch(\"http://jsonplaceholder.typicode.com/users\")\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tlet dataMapped = data.map(({ id, name, email }) => {\n\t\t\t\t\treturn { id, name, email };\n\t\t\t\t});\n\t\t\t\tsetFriends(dataMapped);\n                setFriendsTampon(dataMapped);\n\t\t\t\tsetLoad(false);\n\t\t\t});\n\t}, []);\n\n\t\n\tconst handleChange = (e) => {\n\t\te.preventDefault();\n\t\tconst filteredFriends = friends.filter((friend) => {\n\t\t\treturn friend.name.toLowerCase().includes(e.target.value.toLowerCase());\n\t\t});\n\t\tsetFriendsTampon(friendsTampon = filteredFriends);\n\t};\n\n\tconst openModal = () =>{\n\t\tsetSingleFriend(friends.find((friend)=>{\n\t\t\treturn friend.id=1\n\t\t}))\n\t\tsetModalIsOpen(true)\n\n\t}\n\n\treturn (\n\t\t\n\t\t\n\t\t<div className=\"App\">\n\t\t\t{load ? <Loading /> :\n\t\t\t<>\n\t\t\t\t<h1 className=\"bloc-cards\"><div className=\"centered\">MES</div> <div className=\"centered\">AMIS</div><div className=\"centered\">ROBOTS</div></h1>\n\t\t\t\t<InputField onChange={handleChange} />\n\t\t\t\t<div className=\"bloc-cards\">\n\t\t\t\t\t{friendsTampon.map((friend, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Card onClick={()=>openModal(frien)}\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tname={friend.name}\n\t\t\t\t\t\t\t\temail={friend.email}\n\t\t\t\t\t\t\t\turl={`https://robohash.org/${friend.id}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t<Modal isOpen={modalIsOpen} onRequestClose={()=>setModalIsOpen(false)}>\n\t\t\t\t\t<h2>{singleFriend.name}</h2>\n\t\t\t\t\t<h4>{singleFriend.email}</h4>\n\t\t\t\t</Modal>\n\t\t\t\t</>}\n\t\t\n\t\t</div>\n\t);\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}